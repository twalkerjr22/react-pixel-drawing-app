{"version":3,"sources":["components/Pixel.js","components/Colors.js","components/Canvas.js","components/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["Pixel","props","className","background","current","onClick","color","Canvas","useState","saves","setSaves","currCanvas","setCurrCanvas","saveName","setSaveName","Array","fill","map","matrix","setMatrix","useEffect","fetchMatrixData","localStorage","getItem","s","JSON","parse","length","canvasOptions","canvas","value","id","key","onSubmit","e","preventDefault","push","setItem","stringify","onChange","target","onSelectCanvas","onChangeCanvasName","placeholder","type","disabled","class","clear","window","location","reload","row","rowIndex","_","colIndex","Colors","newMatrix","currentColor","changeColor","ColorPicker","index","setColor","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36b36307.chunk.js","sourcesContent":["import React, { useState} from 'react';\n\n\nconst Pixel = props => {\n\n    return(\n        <div className={ `${props.background} pixel ${\n            props.current ? 'current-color' : ''}`}\n            onClick={props.onClick}\n            background={props.color}\n            onClick={props.onClick}\n        >\n        </div>\n    )\n}\n\nexport default Pixel;","export default [\"white\",\"red\",\"blue\",\"green\",\"yellow\",\"tan\",\"purple\",\"orange\",\"black\"]","import React, { useState, useEffect } from 'react';\nimport Pixel from './Pixel';\nimport Colors from './Colors';\n\n\nconst Canvas = (props) => {\n    // COMPONENT STATES\n    const [saves,setSaves] = useState([]);\n    const [currCanvas,setCurrCanvas] = useState({});\n    const [saveName,setSaveName] = useState();\n    // SETTING OUR INITIAL MATRIX TO AN 30 X 30 2D ARRAY.\n    const [matrix, setMatrix] = useState(\n        Array(30)\n        .fill()\n        .map(() => Array(30).fill(0)\n        ));\n\n        // Use effect hook to do local storage fetching when this component is mounted\n        useEffect(() => \n            {\n                // Calling out fetch data function to get data from local storage\n                fetchMatrixData();\n\n            }, \n        []);\n        \n        /* \n        Function: Fetches data from local storage.\n        If there is anything in our saves, we set our canvas to the first \n        saved canvas\n        */\n        const fetchMatrixData = () => {\n\n            if(localStorage.getItem('saves')!==null){\n         \n                var s = JSON.parse(localStorage.getItem('saves'));\n\n                if(s.length>0){\n                    setSaves(s);\n                    setMatrix(s[0].matrix);\n                    setCurrCanvas(s[0]);\n                }\n\n            }\n        }\n        // Function: Clear saves from local storage\n        const clearAllSaves = (e) => {\n            localStorage.clear();\n            window.location.reload();\n        }\n\n        // Function: to generate HTML for our selection menu.\n       const canvasOptions = saves.map((canvas) => \n            <option value={canvas.id} key={canvas.id}>{canvas.canvas}</option>\n        );\n        \n       // Function: Creates a new canvas\n        const newCanvas = () =>{\n            setMatrix(Array(30)\n            .fill()\n            .map(() => Array(30).fill(0)\n            ));\n        }\n\n        // Function: Submit a new save to local storage.\n        const submitSave = (e) => {\n            e.preventDefault();\n            saves.push({canvas:saveName,id:saves.length,matrix:matrix});\n            setSaves(saves);\n            localStorage.setItem(\"saves\",JSON.stringify(saves));\n          }\n\n        const onChangeCanvasName = (e) => {\n            e.preventDefault();\n            setSaveName(e.target.value);\n           \n        }\n\n        const onSelectCanvas = (e) => {\n            e.preventDefault(e);\n            setMatrix(saves[e.target.value].matrix);\n        }\n\n        // Function: When the user clicks a block, this changes that blocks color\n        const changeColor = (rowIndex,colIndex) => {\n            \n            var newMatrix = JSON.parse(JSON.stringify(matrix));\n            newMatrix[rowIndex][colIndex] = props.currentColor;\n            setMatrix(newMatrix);\n            saves[currCanvas.id].matrix = newMatrix;\n            localStorage.setItem(\"saves\",JSON.stringify(saves));\n       \n            \n        }\n\n        return(\n            <div className=\"canvas-container\">\n                    <form onSubmit={submitSave} className=\"canvas-save\">\n                        <div>\n                            <label>Select Canvas To Load</label>\n                            <select onChange={(e)=>{onSelectCanvas(e)}}>\n                            {canvasOptions}\n                            </select>\n                        </div>\n                        <div>\n                            <input id=\"save-name\"  \n                            onChange={((e)=>{onChangeCanvasName(e)})}\n                            value={saveName}\n                            placeholder=\"Name of this drawing\" type=\"text\"></input>\n                            <button disabled={!saveName} type=\"submit\">Save Canvas</button>\n                        </div>\n                        <button class=\"btn-clear-saves\" onClick={ (e)=> clearAllSaves(e) }type=\"button\">Clear All Saves</button>\n                    </form>\n                <div className={\"canvas\"}>\n                    {matrix.map((row,rowIndex) => \n                        row.map((_,colIndex) => {\n                            return(\n                                <Pixel \n                                    key={`${rowIndex}-${colIndex}`}\n                                    background={Colors[matrix[rowIndex][colIndex]]}\n                                    onClick={e => {changeColor(rowIndex,colIndex)}}\n                                />)\n                        })\n                    )}\n                \n                </div>\n                <button onClick={newCanvas} class=\"btn-save-canvas\" type=\"button\">New Canvas</button>\n               \n            </div>\n        )\n}\n\nexport default Canvas;","import React, { useReact } from 'react';\nimport Colors from './Colors';\nimport Pixel from './Pixel';\n\nconst ColorPicker = (props) => {\n\n    return(\n        <div class=\"color-picker\">\n            {Colors.map((color,index) => {\n               return( \n                    <Pixel\n                        onClick={e => { props.setColor(index)}}\n                        key={index}\n                        background={color}\n                        current={Colors[props.currentColor] === color}\n                    />\n                )\n            })}\n            \n        </div>\n    )\n\n}\n\nexport default ColorPicker;","import React, { useState } from 'react';\nimport './App.css';\nimport Pixel from './components/Pixel';\nimport Canvas from './components/Canvas';\nimport ColorPicker from './components/ColorPicker';\n\nfunction App() {\n  const [color, setColor] = useState(0);\n  \n  return (\n    <div className=\"App\">\n      <ColorPicker \n        currentColor={color} \n        setColor={color => setColor(color)}\n      />\n      <Canvas currentColor={color}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}