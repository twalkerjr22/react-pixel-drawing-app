{"version":3,"sources":["logo.svg","components/Pixel.js","modules/Color.js","components/Canvas.js","components/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","className","background","current","onClick","Canvas","useState","Array","fill","map","matrix","setMatrix","row","rowIndex","_","colIndex","Pixel","key","Colors","e","newMatrix","JSON","parse","stringify","currentColor","changeColor","color","index","setColor","App","ColorPicker","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,wGCE5B,G,YAAA,SAAAC,GACb,OACA,yBACEC,UAAS,UAAKD,EAAME,WAAX,kBACPF,EAAMG,QAAU,gBAAkB,IAEpCC,QAASJ,EAAMI,YCRJ,GAAC,QAAS,YAAa,OAAQ,YCiD/BC,EA3CA,SAAAL,GAAS,MAGQM,mBAASC,MAAM,IACtCC,OACAC,IAAI,kBACDF,MAAM,IAAIC,KAAK,MANH,mBAGbE,EAHa,KAGLC,EAHK,KAkBpB,OACI,yBAAKV,UAAW,UASXS,EAAOD,IAAI,SAACG,EAAIC,GAAL,OACRD,EAAIH,IAAI,SAACK,EAAGC,GACR,OACI,kBAACC,EAAD,CACIC,IAAK,0BACLf,WAAYgB,EAAOR,EAAOG,GAAUE,IACpCX,QAAS,SAAAe,GAAC,OAzBd,SAACN,EAAUE,GAI3B,IAAMK,EAAYC,KAAKC,MAAMD,KAAKE,UAAUb,IAC5CU,EAAUP,GAAUE,GAAYf,EAAMwB,aACtCb,EAAUS,GAmBwBK,CAAYZ,EAAUE,YClCjD,WAAAf,GACX,OACI,yBAAKC,UAAU,eACViB,EAAOT,IAAI,SAACiB,EAAOC,GAChB,OACA,kBAACX,EAAD,CACIZ,QAAS,SAAAe,GAAC,OAAInB,EAAM4B,SAASD,IAC7BV,IAAKU,EACLzB,WAAYwB,EACZvB,QAASe,EAAOlB,EAAMwB,gBAAgBE,QCK3CG,MAbf,WAAgB,IAAD,EACavB,mBAAS,GADtB,mBACNoB,EADM,KACCE,EADD,KAEb,OACE,yBAAK3B,UAAU,OACX,kBAAC6B,EAAD,CACEN,aAAcE,EACdE,SAAU,SAAAF,GAAK,OAAIE,EAASF,MAE9B,kBAAC,EAAD,CAAQF,aAAcE,MCHVK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.91b44e34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default props => {\n  return(\n  <div \n    className={`${props.background} pixel ${\n      props.current ? 'current-color' : ''\n    }`} \n    onClick={props.onClick}\n  />\n  )\n}","export default ['white', 'lightblue', 'blue', 'darkblue']","import React, {Component, useState} from 'react';\nimport Pixel from './Pixel';\nimport Colors from '../modules/Color';\n\n// Canvas to draw individual pixels on a grid.\n// The component stores the grid in its state.\nconst Canvas = props => {\n    // Storing the matrix in state and initializing it with \n    // the grid for the matrix\n    const [matrix, setMatrix] = useState(Array(30)\n        .fill()\n        .map(() => \n            Array(30).fill(0)\n        ));\n\n    const changeColor = (rowIndex, colIndex) => {\n        // Cloning the nested array. We do it this way\n        // for immutability reasons. We can't change the matrix\n        // by editing its current value.\n        const newMatrix = JSON.parse(JSON.stringify(matrix))\n        newMatrix[rowIndex][colIndex] = props.currentColor;\n        setMatrix(newMatrix);\n    }\n\n    return (\n        <div className={'canvas'}>\n            {\n                /* \n                For each item in a row \n                we go through each row item's column and return a pixel for \n                each element in that column.\n                _ means to ignore that parameter.\n                */\n            }\n            {matrix.map((row,rowIndex)=>\n                row.map((_, colIndex) => {\n                    return (\n                        <Pixel\n                            key={'${rowIndex}-${colIndex}'}\n                            background={Colors[matrix[rowIndex][colIndex]]}\n                            onClick={e => changeColor(rowIndex, colIndex)}\n                        />\n                    )\n                    })\n            )}\n        </div>\n    )\n}\n\nexport default Canvas","import React from 'react';\nimport Pixel from './Pixel';\nimport Colors from '../modules/Color';\n\n\n\nexport default props => {\n    return (\n        <div className=\"colorPicker\">\n            {Colors.map((color, index) => {\n                return (\n                <Pixel \n                    onClick={e => props.setColor(index)}\n                    key={index} \n                    background={color} \n                    current={Colors[props.currentColor]===color}\n                />)\n            })}\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pixel from './components/Pixel'\nimport Canvas from './components/Canvas';\nimport ColorPicker from './components/ColorPicker';\n\nfunction App() {\n  const [color, setColor] = useState(0);\n  return (\n    <div className=\"App\">\n        <ColorPicker \n          currentColor={color}\n          setColor={color => setColor(color)}\n        />\n        <Canvas currentColor={color} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}